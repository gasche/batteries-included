(*
 * BatUnix - additional and modified functions for Unix and Unix-compatible systems.
 * Copyright (C) 1996 Xavier Leroy
 * Copyright (C) 2009 David Teller, LIFO, Universite d'Orleans
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version,
 * with the special exception on linking described in file LICENSE.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *)


include Unix

##V<4.2##let write_substring = write
##V<4.2##let single_write_substring = single_write
##V<4.2##let send_substring = send
##V<4.2##let sendto_substring = sendto

let run_and_read cmd =
  (* This code is before the open of BatInnerIO
     to avoid using batteries' wrapped IOs *)
  let string_of_file fn =
    let buff_size = 1024 in
    let buff = Buffer.create buff_size in
    let ic = open_in fn in
    let line_buff = Bytes.create buff_size in
    begin
      let was_read = ref (input ic line_buff 0 buff_size) in
      while !was_read <> 0 do
        Buffer.add_substring buff line_buff 0 !was_read;
        was_read := input ic line_buff 0 buff_size;
      done;
      close_in ic;
    end;
    Buffer.contents buff
  in
  let tmp_fn = Filename.temp_file "" "" in
  let cmd_to_run = cmd ^ " > " ^ tmp_fn in
  let status = Unix.system cmd_to_run in
  let output = string_of_file tmp_fn in
  Unix.unlink tmp_fn;
  (status, output)

(*$T run_and_read
  run_and_read "echo"            = (WEXITED 0, "\n")
  run_and_read "echo toto"       = (WEXITED 0, "toto\n")
  run_and_read "seq 1 3"         = (WEXITED 0, "1\n2\n3\n")
  run_and_read "printf 'abc'"    = (WEXITED 0, "abc")
*)

include BatIO.InnerUnix

(**
   {6 Processes}
*)

let open_process_in ?autoclose ?(cleanup=true) s =
  wrap_in ?autoclose ~cleanup (open_process_in s)

let open_process_out ?(cleanup=true) s =
  wrap_out ~cleanup (open_process_out s)

let open_process ?autoclose ?(cleanup=true) s =
  let (cin, cout) = open_process s in
  (wrap_in ?autoclose cin, wrap_out ~cleanup cout)

(*$T open_process
  let s = "hello world" in let r,w = open_process "cat" in \
  Printf.fprintf w "%s\n" s; IO.close_out w; \
  IO.read_line r = s

  try \
    let r,w = open_process "cat" in \
      Printf.fprintf w "hello world\n"; \
      IO.close_out w; \
      while true do ignore (input_char r) done; false \
  with e -> e=IO.No_more_input || e=End_of_file
*)


let open_process_full ?autoclose ?(cleanup=true) s args =
  let (a,b,c) = open_process_full s args in
  (wrap_in ?autoclose ~cleanup a, wrap_out ~cleanup b, wrap_in ?autoclose ~cleanup c)

(**@TODO in a future version, [close_process_in] should also work
   on processes opened with [open_process] or [open_process_full].
   Same thing for [close_process_out].*)

let close_process_in cin =
  match input_get cin with
  | Some in_chan -> close_process_in in_chan
  | None -> raise (Unix_error(EBADF, "close_process_in", ""))

let close_process_out cout =
  match output_get cout with
  | Some out_chan -> close_process_out out_chan
  | None -> raise (Unix_error(EBADF, "close_process_out", ""))

let close_process (cin, cout) =
  match input_get cin, output_get cout with
  | Some pin, Some pout -> close_process (pin, pout)
  | _, _ -> raise (Unix_error(EBADF, "close_process", ""))

let close_process_full (cin, cout, cin2) =
  match input_get cin, output_get cout, input_get cin2 with
  | Some pin, Some pout, Some pin2 ->
     close_process_full (pin, pout, pin2)
  | _, _, _ -> raise (Unix_error(EBADF, "close_process_full", ""))

(**
   {6 Network}
*)

let shutdown_connection cin =
  match input_get cin with
  | Some pin -> shutdown_connection pin
  | None -> raise (Invalid_argument "Unix.descr_of_in_channel")

let open_connection ?autoclose addr =
  let (cin, cout) = open_connection addr in
  let (cin',cout')= (wrap_in ?autoclose ~cleanup:true cin, wrap_out ~cleanup:true cout) in
  let close ()    = shutdown_connection cin' in
  (BatIO.inherit_in  cin' ~close, BatIO.inherit_out cout' ~close)

let establish_server ?autoclose ?cleanup f addr =
  let f' cin cout = f (wrap_in ?autoclose ?cleanup cin) (wrap_out cout) in
  establish_server f' addr

(**
   {6 Tools}
*)

let is_directory fn = (lstat fn).st_kind = S_DIR

let rec restart_on_EINTR f x =
  try f x
  with Unix_error(EINTR, _, _) -> restart_on_EINTR f x
